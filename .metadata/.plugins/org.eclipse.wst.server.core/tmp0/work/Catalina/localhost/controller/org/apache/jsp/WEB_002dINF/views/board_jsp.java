/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.87
 * Generated at: 2024-04-24 00:34:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class board_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1308849601000L));
    _jspx_dependants.put("jar:file:/C:/Users/SMHRD/Desktop/springstudy/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/SpringMVC3/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- 기본적으로 jstl/el 을 쓴다 레거시 프로젝트에는 기본적으로 jstl 라이브러리가 담아져있다 \r\n");
      out.write("고로 로드하는 코드만 적어준다 메이븐 dependencies 폴더를 안을 보면 jstl 라이브러리가 보인다 -->\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("<!-- == controller가져온 것임  -->\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<!-- Latest compiled and minified CSS -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\">\r\n");
      out.write("\r\n");
      out.write("<!-- jQuery library -->\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- Popper JS -->\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- Latest compiled JavaScript -->\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- 자동완성 기능을 위해 가져온  jquery-ui  -->\r\n");
      out.write("<script src=\"https://code.jquery.com/ui/1.13.1/jquery-ui.js\"></script>\r\n");
      out.write("<link rel = \"stylesheet\" href=\"https://code.jquery.com/ui/1.13.1/themes/smoothness/jquery-ui.css\">\r\n");
      out.write("\r\n");
      out.write("<!-- 챠트를 그리기 위한 라이브러리  -->\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- 챠트를 그리기 plugins  -->\r\n");
      out.write("<script src= \"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2 \"></script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<!-- 이 jsp를 화면에 보이게 하려면 스프링의 ds(디스패쳐서블릿)는 항상 controller 이라는\r\n");
      out.write(" 클래스를 실행시키게 되어있으므로 개발자는 controller클래스를 생성해야 한다 -->\r\n");
      out.write("	<div class=\"jumbotron\">\r\n");
      out.write("		<h1>빅데이터 23차 게시판</h1>\r\n");
      out.write("		<p>Bootstrap을 사용하여 게시판 만들자</p>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<div class=\"card\">\r\n");
      out.write("			<div class=\"card-header\">게시판 연습</div>\r\n");
      out.write("			<div class=\"card-body\">\r\n");
      out.write("\r\n");
      out.write("				<form id=\"searchForm\" onsubmit=\"return false\" class=\"form-inline\">\r\n");
      out.write("					<div align=\"right\" class=\"form-group\">\r\n");
      out.write("						<select name=\"type\" class=\"form-control btn-warning\" id=\"sel1\">\r\n");
      out.write("							<option class=\"btn-light\">작성자</option>\r\n");
      out.write("							<option class=\"btn-light\">제목</option>\r\n");
      out.write("						</select>\r\n");
      out.write("					</div>\r\n");
      out.write("					<input id = \"auto_complete\" name=\"text\" type=\"text\" class=\"form-control\">\r\n");
      out.write("					<input id=\"searchBtn\" type=\"submit\" class=\"btn btn-warning\" value=\"검색\">\r\n");
      out.write("\r\n");
      out.write("				</form>\r\n");
      out.write("				<br>\r\n");
      out.write("				<table id=\"myTable\" class=\"table table-bodered table-hover\">\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td>번호</td>\r\n");
      out.write("						<td>제목</td>\r\n");
      out.write("						<td>작성자</td>\r\n");
      out.write("						<td>게시글</td>\r\n");
      out.write("						<td>작성일</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<!-- jstl/el 을 사용하여 model 안에 저장된 게시글 정보를 전부 화면에 출력 -->\r\n");
      out.write("					");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("				</table>\r\n");
      out.write("			<!-- onclick은 get 전송방식 -->\r\n");
      out.write("			<button onclick=\"location.href='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/register'\" class=\"btn btn-primary btn-sm\">글쓰기</button>\r\n");
      out.write("			<!-- chartBtn은 비동기를 위한 class -->\r\n");
      out.write("			<button class=\"btn btn-success btn-sm chartBtn\">챠트보기</button>\r\n");
      out.write("			</div>	\r\n");
      out.write("			\r\n");
      out.write("			<div class=\"card-footer myChartArea\" >\r\n");
      out.write("				<h1>트위터 조회수</h1>\r\n");
      out.write("				<canvas id = \"myChart\" width=\"500\" height=\"500\" ></canvas>	\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<br></br>\r\n");
      out.write("	\r\n");
      out.write("	</div>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		// cpath는 자바코드이므로 따로 빼준다.\r\n");
      out.write("		var cpath = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("	</script>\r\n");
      out.write("<!-- 챠트 그리기 ----------------------------------------- -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("//1. 첫 실행시 myChartArea 영역을 숨겨놓기\r\n");
      out.write("// $(\".myChartArea\").css(\"display\" , none); //매개변수2개면 변경 1개면 가지고 온다\r\n");
      out.write(" $(\".myChartArea\").hide(); //footer를 숨기는 것임\r\n");
      out.write("\r\n");
      out.write("// 2.챠트보기 누르면 myChartArea 영역을 보여주기 --> footer을 보여주기\r\n");
      out.write("$(\".chartBtn\").on(\"click\",function(){\r\n");
      out.write("	// myChartArea영역이 숨겨져 있다면 영역을 보여주기\r\n");
      out.write("	if ($(\".myChartArea\").css(\"display\")==\"none\") {\r\n");
      out.write("	$(\".myChartArea\").slideDown(); // slideDown() --> 제이쿼리의 기능\r\n");
      out.write("	// 비동기 통신으로 /artist url 로 데이터 요청\r\n");
      out.write("	// --> 언급된 빈도수가 가장 높은 상위5명에 대한\r\n");
      out.write("	// --> 아티스트명과 빈도수 데이터를 결과값으로 받아와서 챠트를 그려주세요\r\n");
      out.write("	 	$.ajax({  	\r\n");
      out.write("		url : `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/artist`,\r\n");
      out.write("		// data : data, 보내줄 데이터는 없음 받아오기만 함\r\n");
      out.write("		type : \"get\",\r\n");
      out.write("		dataType : \"json\",\r\n");
      out.write("		success: function(res) {\r\n");
      out.write("			console.log(\"받아온 결과값 >> \" ,res);\r\n");
      out.write("			// 라벨, 데이터 생성\r\n");
      out.write("			var	labels =[];\r\n");
      out.write("			var	datas =[];\r\n");
      out.write("			for(var i = 0; i<res.length;i++){\r\n");
      out.write("				labels.push(res[i].artist.toUpperCase());\r\n");
      out.write("				datas.push(res[i].keywordCnt);\r\n");
      out.write("			}\r\n");
      out.write("			drawChart(labels,datas);\r\n");
      out.write("			},\r\n");
      out.write("			error :function(e){\r\n");
      out.write("			console.log(e);\r\n");
      out.write("		}\r\n");
      out.write("	})\r\n");
      out.write("	}else{\r\n");
      out.write("	// 캔버스를 삭제하고 \r\n");
      out.write("	$(\"#myChart\").remove();\r\n");
      out.write("	// 다시 새로운 캔버스 추가하기\r\n");
      out.write("	$(\".myChartArea\").append('<canvas id = \"myChart\" width=\"500\" height=\"500\" ></canvas>');\r\n");
      out.write("	// 그렇지 않으면 영역을 위로 올리면서 숨겨주기\r\n");
      out.write("	$(\".myChartArea\").slideUp();\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("})\r\n");
      out.write("\r\n");
      out.write("//함수로 쪼개기\r\n");
      out.write("function drawChart (labels,datas){\r\n");
      out.write("	// 1. 챠트를 그릴 canvas태그를 선택\r\n");
      out.write("	// const ctx = document.getElementById('myChart');\r\n");
      out.write("	var ctx = $(\"#myChart\");\r\n");
      out.write("	// config가 데이터를 선언하므로 위쪽에 data을 정의\r\n");
      out.write("	const data = {\r\n");
      out.write("			  // db에서 조회한 아티스트명으로 변경\r\n");
      out.write("			  labels: labels,\r\n");
      out.write("			\r\n");
      out.write("			  datasets: [{\r\n");
      out.write("			    label: '트위터조회수',\r\n");
      out.write("			    // db에서 조회한 키워드빈도수로 변경\r\n");
      out.write("			    data: datas,\r\n");
      out.write("			    backgroundColor: [\r\n");
      out.write("			      //'rgb(255, 99, 132)',\r\n");
      out.write("			      //'rgb(54, 162, 235)',\r\n");
      out.write("			     // 'rgb(255, 205, 86)',\r\n");
      out.write("			      //'rgb(255, 205, 90)',\r\n");
      out.write("			     // 'rgb(255, 205, 95)'\r\n");
      out.write("			      '#8ecae6', // css문법상 #을 붙여컬러지정\r\n");
      out.write("			      '#ff006e',\r\n");
      out.write("			      '#bde0fe',\r\n");
      out.write("			      '#ff70a6',\r\n");
      out.write("			      '#080708'\r\n");
      out.write("			    ],\r\n");
      out.write("			    hoverOffset: 4\r\n");
      out.write("			  }]\r\n");
      out.write("			};\r\n");
      out.write("	const options = {\r\n");
      out.write("		// 챠트크기를 상대적인 크기가 아니라 내가 원하는 크기로 변경\r\n");
      out.write("		// position : relative 속성을 풀어주는 방법\r\n");
      out.write("		// 위의 width=\"500\" height=\"500\"이 적용됨\r\n");
      out.write("		responsive : false,\r\n");
      out.write("		// 따로 설치한 플러그인 사용하자\r\n");
      out.write("		plugins : {\r\n");
      out.write("			datalabels : {\r\n");
      out.write("				color : [\r\n");
      out.write("					\"#fff\",\r\n");
      out.write("					\"#fff\",\r\n");
      out.write("					\"#fff\",\r\n");
      out.write("					\"#fff\",\r\n");
      out.write("					\"#fff\"\r\n");
      out.write("				],\r\n");
      out.write("				// 형식을 기능적으로 동작 // v,c : 밸류() ,컨텍스트()\r\n");
      out.write("				formatter : function(v,c){\r\n");
      out.write("					// v,c가 의미하는 건 뭘까?\r\n");
      out.write("					console.log(\"f확인>>\",v);\r\n");
      out.write("					console.log(\"c확인>>\",c);\r\n");
      out.write("					// 챠트 종류마다 구조가 다름\r\n");
      out.write("					// c출력해서 구조 확인해보기\r\n");
      out.write("					return c.chart.data.labels[c.dataIndex]\r\n");
      out.write("				},\r\n");
      out.write("				font :{\r\n");
      out.write("					size : 20	\r\n");
      out.write("				}\r\n");
      out.write("			}		\r\n");
      out.write("		}	\r\n");
      out.write("	};\r\n");
      out.write("	const config = {\r\n");
      out.write("			// 플러그인 의 종류가 여러개 있음\r\n");
      out.write("			// --> 객체를 넘겨주기 \r\n");
      out.write("			  plugins : [ChartDataLabels],\r\n");
      out.write("			  // 챠트 종류 지정\r\n");
      out.write("			  type: 'pie',\r\n");
      out.write("			  // 들어갈 데이터 지정  // 속성 : 변수\r\n");
      out.write("			  data: data,\r\n");
      out.write("			  // \r\n");
      out.write("			  options : options\r\n");
      out.write("			};\r\n");
      out.write("	// 2. 챠트그리기\r\n");
      out.write("	// new Chart (챠트영역 , 객체형식의 챠트의 옵션들)\r\n");
      out.write("	new Chart(ctx,config);		\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("    \r\n");
      out.write("	<script src=\"resources/js/myfirstjs.js\" ></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/views/board.jsp(6,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("cpath");
      // /WEB-INF/views/board.jsp(6,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/board.jsp(6,0) '${pageContext.request.contextPath}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${pageContext.request.contextPath}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/board.jsp(71,5) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/board.jsp(71,5) '${list}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${list}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/board.jsp(71,5) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("b");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("						<tr>\r\n");
            out.write("							<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.idx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("							<td>\r\n");
            out.write("								<!-- 1.쿼리 스트링으로 데이터 보내기 \r\n");
            out.write("						     2. 경로상에 그냥 바로 데이터 포함해서 보내기--> <!-- <a href=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("/boardContent?idx=");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.idx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</a> -->\r\n");
            out.write("								<a href=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("/boardContent/");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.idx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</a>\r\n");
            out.write("							</td>\r\n");
            out.write("							<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.writer}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("							<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.content}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("							<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${b.inDate}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("						</tr>\r\n");
            out.write("					");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
